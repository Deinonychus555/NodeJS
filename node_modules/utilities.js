var definePropertyAsNotWritable = function   (object, key, value){
	
	var config = {
		writable:false,
		enumerable:true, // se muestran
	};

	Object.defineProperty(object, key, config);
};


// Singleton

// Las funciones del tipo (function(){... return x})(), han de tener un return
var SomeSingleton = (function(){

	
	var Singleton = function (prop){
		
		var p;

		for (p in prop){
			
			 eval("this." + p + "=prop[p]");
		};
		
	    
		this.saludate = function(){ return "hello"};
	}

	
	var _instance;

	var _static = {

		getInstance : function(properties){
			
			if (_instance === undefined) {
				
				_instance = new Singleton(properties);				
				
			}
			
			return _instance;
			
		},
		
		reset : function(){
			console.log("reseteando");
			_instance = undefined;
			},

		
	}
	
	return _static
	
	
})();


exports.definePropertyAsNotWritable  = definePropertyAsNotWritable;
exports.SomeSingleton  = SomeSingleton;
